  - name: Disable default version of NodJs
    ansible.builtin.shell: dnf module disable nodejs -y

  - name: Enable NodeJs 18 version
    ansible.builtin.shell: dnf module enable nodejs:18 -y

  - name: Installing NodeJs
    ansible.builtin.dnf:
      name: nodejs
      state: installed

  - name: Configuring backend service
    ansible.builtin.template:  # Changed the module name from copy to templates
      src: backend.service
      dest: /etc/systemd/system/backend.service
  - name: Adding Application user
    ansible.builtin.user:
      name: expense

  - name: App Prerequisites
    ansible.builtin.include_role:
      name: common
      tasks_from: app_prereq

  - name: Downloading dependencies  #using this module as we already have package
    community.general.npm:
      path: /app

  - name: Reloading systemd and start backend service
    ansible.builtin.systemd_service:
      name: backend
      enabled: yes # This should be true so that even after reboot it comes up
      state: restarted
      daemon-reload: yes

  - name: Installing  MySql Clinet
    ansible.builtin.dnf:
      name: mysql
      state: installed

  - name: Installing Mysql client & Python Library for MYSQL (PyMySql) # this is a dependency for the below Loading schema step
    ansible.builtin.dnf:
      name: "{{ item }}"
      state: installed
    loop:
      - mysql
      - python3-PyMySQL

  - name: Loading Schema
    community.mysql.mysql_db:
      state: import
      name: all
      target: /app/schema/backend.sql
      login_user: "{{ lookup('amazon.aws.aws_ssm', '{{env}}.expense.rds.username', region='us-east-1' ) }}"
      login_password: "{{ lookup('amazon.aws.aws_ssm', '{{env}}.expense.rds.password', region='us-east-1' ) }}"
      login_host: "{{ lookup('amazon.aws.aws_ssm', '{{env}}.expense.rds.endpoint', region='us-east-1' ) }}"